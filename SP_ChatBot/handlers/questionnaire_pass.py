from aiogram import Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from db.session import SessionLocal
from keyboards.inline import get_review_keyboard, get_edit_answer_keyboard
from models.bases import Questionnaire, Question, Answer
from states.fsm import QuestionnairePassing

def questionnaire_pass_handlers(dp: Dispatcher):

    @dp.message(QuestionnairePassing.waiting_for_code, lambda message: not message.text.startswith("/"))
    async def load_questionnaire(message: Message, state: FSMContext):
        code = message.text.strip()

        async with SessionLocal() as session:
            result = await session.execute(
                select(Questionnaire).where(Questionnaire.code == code)
            )
            questionnaire = result.scalar_one_or_none()

            if questionnaire is None:
                await message.answer("‚ùå –û–ø—Ä–æ—Å–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –µ—â—ë —Ä–∞–∑:")
                return

            result = await session.execute(
                select(Answer).filter(
                    Answer.respondent_id == message.from_user.id,
                    Answer.questionnaire_id == questionnaire.id
                )
            )
            existing_answer = result.scalars().first()  # –∑–¥–µ—Å—å –∏—Å–ø—Ä–∞–≤–∏–ª –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

            if existing_answer:
                await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —ç—Ç–æ—Ç –æ–ø—Ä–æ—Å–Ω–∏–∫! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –µ—â—ë —Ä–∞–∑:")
                return

            result = await session.execute(
                select(Question).where(Question.questionnaire_id == questionnaire.id).order_by(Question.id)
            )
            questions = result.scalars().all()

            if not questions:
                await message.answer("–£ —ç—Ç–æ–≥–æ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
                return

        await state.update_data(
            questionnaire_id=questionnaire.id,
            questions=[(q.id, q.text) for q in questions],
            current=0,
            answers=[]
        )
        await message.answer(
            f"–û–ø—Ä–æ—Å–Ω–∏–∫ ¬´{questionnaire.title}¬ª \n\n–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ, –¥–æ–ª–≥–æ –Ω–µ —Ä–∞–∑–¥—É–º—ã–≤–∞—è –Ω–∞–¥ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–æ–π, —Ç–∞–∫ –∫–∞–∫ –Ω–∞–∏–±–æ–ª–µ–µ –∂–∏–≤–æ–π –æ—Ç–≤–µ—Ç –¥–∞—Å—Ç –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! \n\n–£—Å–ø–µ—Ö–æ–≤! \n\n–í–æ–ø—Ä–æ—Å ‚Ññ1:\n{questions[0].text}"
        )
        await state.set_state(QuestionnairePassing.answering_questions)

    @dp.message(QuestionnairePassing.answering_questions)
    async def process_answer(message: Message, state: FSMContext):
        data = await state.get_data()
        answers = data["answers"]
        questions = data["questions"]
        current = data["current"]
        editing = data.get("editing", False)

        question_id, _ = questions[current]
        if current < len(answers):
            answers[current] = (question_id, message.text)  # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        else:
            answers.append((question_id, message.text))  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ

        await state.update_data(answers=answers)

        if editing:
            text = "üìù –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã (–ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):\n\n" + "\n".join(
                [f"{i + 1}. {q_text}\n {ans}" for i, ((_, q_text), (_, ans)) in enumerate(zip(questions, answers))]
            )
            await message.answer(text, reply_markup=get_review_keyboard())
            await state.set_state(QuestionnairePassing.reviewing)
            await state.update_data(editing=False)  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        else:
            current += 1
            if current >= len(questions):
                await state.update_data(current=current, answers=answers)
                text = "üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –∏ –≤–Ω–µ—Å–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ:\n\n" + "\n".join(
                    [f"{i + 1}. {q_text}\n- {ans}" for i, ((_, q_text), (_, ans)) in
                     enumerate(zip(questions, answers))]
                )
                await message.answer(text, reply_markup=get_review_keyboard())
                await state.set_state(QuestionnairePassing.reviewing)
            else:
                next_q_text = questions[current][1]
                await state.update_data(current=current, answers=answers)
                await message.answer(f"–í–æ–ø—Ä–æ—Å ‚Ññ{current + 1}:\n{next_q_text}")

    @dp.callback_query(F.data == "confirm_answers")
    async def confirm_answers(callback: CallbackQuery, state: FSMContext):
        data = await state.get_data()
        await save_answers(
            respondent_id=callback.from_user.id,
            questionnaire_id=data["questionnaire_id"],
            answers=data["answers"]
        )
        await callback.message.edit_text("‚úÖ –°–ø–∞—Å–∏–±–æ, –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–µ–∫—Ä—É—Ç–µ—Ä—É! \n\n–ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –∫–æ–¥ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —á–∞—Ç:")
        await state.clear()
        await callback.answer()

    @dp.callback_query(F.data.startswith("edit_answer:"))
    async def edit_answer(callback: CallbackQuery, state: FSMContext):
        index = int(callback.data.split(":")[1])
        data = await state.get_data()
        question_text = data["questions"][index][1]

        await state.update_data(
            current=index,
            editing=True
        )

        await callback.message.edit_text(f"‚úèÔ∏è –ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question_text}")
        await state.set_state(QuestionnairePassing.answering_questions)
        await callback.answer()

    @dp.callback_query(F.data == "edit_menu")
    async def edit_menu(callback: CallbackQuery, state: FSMContext):
        data = await state.get_data()
        questions = data["questions"]
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=get_edit_answer_keyboard(questions))
        await callback.answer()

async def save_answers(respondent_id: int, questionnaire_id: int, answers: list[tuple[int, str]]):
    async with SessionLocal() as session:
        for question_id, answer_text in answers:
            session.add(Answer(
                respondent_id=respondent_id,
                questionnaire_id=questionnaire_id,
                question_id=question_id,
                answer_text=answer_text
            ))
        await session.commit()