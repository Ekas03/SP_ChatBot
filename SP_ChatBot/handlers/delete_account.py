from aiogram import F, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select, delete
from db.session import SessionLocal
from keyboards.inline import get_personal_account
from models.bases import Profile, Questionnaire, Answer, Question


def get_delete_confirmation_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üü• –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="confirm_delete")],
        [InlineKeyboardButton(text="üü© –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")]
    ])


def delete_account_handlers(dp: Dispatcher):
    @dp.message(F.text == "/delete_account")
    async def cmd_delete_account(message: Message):
        user_id = message.from_user.id

        async with SessionLocal() as session:
            result = await session.execute(select(Profile).where(Profile.telegram_id == user_id))
            profile = result.scalars().first()

        if not profile:
            await message.answer("‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ –ù–∞—á–∞—Ç—å - /start")
            return

        await message.answer(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
            reply_markup=get_delete_confirmation_keyboard()
        )

    @dp.callback_query(F.data == "confirm_delete")
    async def confirm_delete(callback: CallbackQuery, state: FSMContext):
        user_id = callback.from_user.id

        async with SessionLocal() as session:
            result = await session.execute(
                select(Profile).where(Profile.telegram_id == user_id)
            )
            profile = result.scalars().first()

            if not profile:
                await callback.message.edit_text("‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ –ù–∞—á–∞—Ç—å - /start")
                return

            if profile.role == "recruiter":
                result = await session.execute(
                    select(Questionnaire.id).where(Questionnaire.recruiter_id == profile.id)
                )
                questionnaire_ids = [row[0] for row in result.fetchall()]

                if questionnaire_ids:
                    await session.execute(delete(Answer).where(Answer.questionnaire_id.in_(questionnaire_ids)))
                    await session.execute(delete(Question).where(Question.questionnaire_id.in_(questionnaire_ids)))
                    await session.execute(delete(Questionnaire).where(Questionnaire.id.in_(questionnaire_ids)))

            await session.delete(profile)
            await session.commit()

        await callback.message.edit_text("‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")
        await state.clear()
        await callback.answer()

    @dp.callback_query(F.data == "cancel_delete")
    async def cancel_delete(callback: CallbackQuery, state: FSMContext):
        user_id = callback.from_user.id

        async with SessionLocal() as session:
            result = await session.execute(
                select(Profile).where(Profile.telegram_id == user_id)
            )
            profile = result.scalars().first()

            if profile and profile.role == "candidate":
                await callback.message.edit_text(
                    "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ! \n\n–ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –∫–æ–¥ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –æ—Ç —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –µ–≥–æ:"
                )
            else:
                await callback.message.edit_text(
                    "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                    reply_markup=get_personal_account()
                )

        await state.clear()
        await callback.answer()

