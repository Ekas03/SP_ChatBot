from aiogram import F, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from db.session import SessionLocal
from keyboards.inline import get_personal_account
from models.bases import Profile
from states.fsm import CandidateRegistration
from states.registration import Registration


def registration_handlers(dp: Dispatcher):
    from aiogram import F

    @dp.callback_query(F.data.startswith("role_"))
    async def handle_role(callback: CallbackQuery, state: FSMContext):
        role = callback.data.split("_")[1]
        await state.update_data(role=role)

        if role == "candidate":
            await callback.message.answer("–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥ —Ä–æ–ª—å—é \"–ö–ê–ù–î–ò–î–ê–¢\" –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∏–º—è. \n\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è:")
            await state.set_state(CandidateRegistration.waiting_for_name)
        elif role == "recruiter":
            await callback.message.answer(
                "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥ —Ä–æ–ª—å—é \"–†–ï–ö–†–£–¢–ï–†\" –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∏–º—è, –∫–æ–º–ø–∞–Ω–∏—é –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å. –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–≤–æ–¥–∞, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—á–µ—Ä–∫."
                "\n\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è:")

            await state.set_state(Registration.waiting_for_name)

        await callback.answer()

    @dp.message(Registration.waiting_for_name)
    async def process_name(message: Message, state: FSMContext):
        name = message.text.strip()
        if not name:
            await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∏–º—è.")
            return
        await state.update_data(name=name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
        await state.set_state(Registration.waiting_for_company)

    @dp.message(Registration.waiting_for_company)
    async def process_company(message: Message, state: FSMContext):
        company = message.text.strip()
        if not company:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return
        await state.update_data(company=company)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")
        await state.set_state(Registration.waiting_for_position)


    @dp.message(Registration.waiting_for_position)
    async def process_position(message: Message, state: FSMContext):
        position = message.text.strip()
        if not position:
            await message.answer("–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")
            return

        await state.update_data(position=position)
        data = await state.get_data()

        async with SessionLocal() as session:
            new_profile = Profile(
                telegram_id=message.from_user.id,
                name=data["name"],
                company=data["company"],
                position=data["position"],
                role=data["role"]
            )
            session.add(new_profile)
            await session.commit()

        await message.answer(
            f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!\n\n"
            f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n"
            f"–ò–º—è: {data['name']}\n"
            f"–ö–æ–º–ø–∞–Ω–∏—è: {data['company']}\n"
            f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {data['position']}\n"
            f"–†–æ–ª—å: {'–†–µ–∫—Ä—É—Ç–µ—Ä' if data['role'] == 'recruiter' else '–ö–∞–Ω–¥–∏–¥–∞—Ç'}\n\n"
            f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã üëá",
            reply_markup=get_personal_account()
        )

        await state.clear()
